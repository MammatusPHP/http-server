<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use Mammatus\Http\Server\Middleware\UnformattedContent;
use Mammatus\Http\Server\Web\Server;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Log\LoggerInterface;
use React\Cache\ArrayCache;
use React\EventLoop\LoopInterface;
use React\Http\Middleware\LimitConcurrentRequestsMiddleware;
use React\Http\Middleware\RequestBodyBufferMiddleware;
use React\Http\Middleware\StreamingRequestMiddleware;
use React\Http\Server as HttpServer;
use React\Promise\PromiseInterface;
use ReactInspector\HttpMiddleware\Metrics as MiddlewareCollectorMetrics;
use ReactInspector\HttpMiddleware\MiddlewareCollector;
use ReactParallel\EventLoop\EventLoopBridge;
use ReactParallel\Factory;
use ReactParallel\Logger\Logger;
use ReactParallel\ObjectProxy\Proxy;
use ReactParallel\Pool\Infinite\Infinite;
use ReactParallel\Pool\Worker\Worker as WorkerPool;
use ReactParallel\Streams\RecvObservable;
use ReactParallel\Streams\SingleRecv;
use Thruway\Middleware;
use WyriHaximus\HtmlCompress\Factory as HtmlCompressFactory;
use WyriHaximus\Metrics\Label;
use WyriHaximus\Metrics\Label\Name;
use WyriHaximus\Metrics\Registry;
use WyriHaximus\PSR3\CallableThrowableLogger\CallableThrowableLogger;
use WyriHaximus\PSR3\ContextLogger\ContextLogger;
use WyriHaximus\React\Http\Middleware\CssCompressMiddleware;
use WyriHaximus\React\Http\Middleware\HtmlCompressMiddleware;
use WyriHaximus\React\Http\Middleware\JsCompressMiddleware;
use WyriHaximus\React\Http\Middleware\WebrootPreloadMiddleware;
use function React\Promise\resolve;
use function WyriHaximus\iteratorOrArrayToArray;

/**
 * This class is generated by mammatus/http-server
 */
abstract class AbstractConfiguration
{
    private bool $initialized = false;

    /**
     * @return iterable<MiddlewareInterface>
     */
    abstract protected function middleware(): iterable;

    final protected function initialize(LoopInterface $loop, LoggerInterface $logger, ContainerInterface $container)
    {
        $htmlCompress = HtmlCompressFactory::constructSmallest();
        \Thruway\Logging\Logger::set($logger);
        $rpFactory = $container->get(Factory::class);
        $metricsRegistry = $container->get(Registry::class);
        $metricsRegistry->counter('vhost', 'Currently active vhosts', new Name('type'))->counter(new Label('type', 'HTTP'))->incrBy(2);
                $metricsRegistry->counter('vhost', 'Currently active vhosts', new Name('type'))->counter(new Label('type', 'WebSocket'))->incrBy(1);
        $metricsRegistry->counter('vhost_realm', 'Currently active realms per vhosts', new Name('type'), new Name('vhost'))->counter(new Label('type', 'WebSocket'), new Label('vhost', 'healthz'))->incrBy(1);
        $workerPool_healthz    = new WorkerPool(
            $rpFactory,
            $container->get(RequestWorkerFactory_healthz::class),
            (int) '13'
        );
        $http_server_healthz = new HttpServer($loop, ...array_merge(
                iteratorOrArrayToArray($this->middleware()),
                [
                    new LimitConcurrentRequestsMiddleware(PHP_INT_MAX),
                    new StreamingRequestMiddleware(),
                    new MiddlewareCollector(MiddlewareCollectorMetrics::create($metricsRegistry, new Label('vhost', 'healthz'))),
                                            new Middleware(['/', '/ws/'], $loop, $container->get(RouterFactory_healthz::class)->router()),
                                        new RequestBodyBufferMiddleware(),
                    static fn (ServerRequestInterface $request, callable $next): PromiseInterface => resolve($next($request->withAttribute('vhost', 'healthz'))),
                                        new WebrootPreloadMiddleware(
                        '/home/wyrihaximus/Projects/http-server/vendor/mammatus/healthz-vhost/webroot/',
                        new ContextLogger($logger, ['section' => 'webroot'], 'webroot'),
                        new ArrayCache(), // TODO: Add support for other cache storages
                    ),
                                        new HtmlCompressMiddleware($htmlCompress),
                    new CssCompressMiddleware($htmlCompress),
                    new JsCompressMiddleware($htmlCompress),
                    static fn(ServerRequestInterface $request): PromiseInterface => $workerPool_healthz->perform(new \Mammatus\Http\Server\Middleware\Work(new \Mammatus\Http\Server\Middleware\Request($request))),
                ]
            )
        );
        $http_server_healthz->on('error', CallableThrowableLogger::create($logger));
        $this->server_healthz = new Server(
            'healthz',
            '0.0.0.0:9666',
            $http_server_healthz,
        );
                $metricsRegistry->counter('vhost', 'Currently active vhosts', new Name('type'))->counter(new Label('type', 'WebSocket'))->incrBy(0);
        $metricsRegistry->counter('vhost_realm', 'Currently active realms per vhosts', new Name('type'), new Name('vhost'))->counter(new Label('type', 'WebSocket'), new Label('vhost', 'prometheus-metrics'))->incrBy(0);
        $workerPool_prometheus_metrics    = new WorkerPool(
            $rpFactory,
            $container->get(RequestWorkerFactory_prometheus_metrics::class),
            (int) '13'
        );
        $http_server_prometheus_metrics = new HttpServer($loop, ...array_merge(
                iteratorOrArrayToArray($this->middleware()),
                [
                    new LimitConcurrentRequestsMiddleware(PHP_INT_MAX),
                    new StreamingRequestMiddleware(),
                    new MiddlewareCollector(MiddlewareCollectorMetrics::create($metricsRegistry, new Label('vhost', 'prometheus-metrics'))),
                                        new RequestBodyBufferMiddleware(),
                    static fn (ServerRequestInterface $request, callable $next): PromiseInterface => resolve($next($request->withAttribute('vhost', 'prometheus-metrics'))),
                                        new HtmlCompressMiddleware($htmlCompress),
                    new CssCompressMiddleware($htmlCompress),
                    new JsCompressMiddleware($htmlCompress),
                    static fn(ServerRequestInterface $request): PromiseInterface => $workerPool_prometheus_metrics->perform(new \Mammatus\Http\Server\Middleware\Work(new \Mammatus\Http\Server\Middleware\Request($request))),
                ]
            )
        );
        $http_server_prometheus_metrics->on('error', CallableThrowableLogger::create($logger));
        $this->server_prometheus_metrics = new Server(
            'prometheus-metrics',
            '0.0.0.0:7331',
            $http_server_prometheus_metrics,
        );
        
        $this->initialized = true;
    }


    /**
     * @return iterable<Server>
     */
    public function servers(): iterable
    {
        if ($this->initialized === false) {
            throw new \Exception('no init yet');
        }

                yield 'healthz' => $this->server_healthz;
                yield 'prometheus-metrics' => $this->server_prometheus_metrics;
            }
}
// phpcs:enable
