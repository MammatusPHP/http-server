<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use Firehed\SimpleLogger\Stdout;
use Mammatus\ContainerFactory;
use ReactParallel\ObjectProxy\Generated\ProxyList;
use ReactParallel\Pool\Worker\Work\Worker;
use ReactParallel\Pool\Worker\Work\WorkerFactory;
use ReactParallel\Psr11ContainerProxy\ContainerProxy;

/**
 * This class is generated by mammatus/http-server
 */
final class WebSocketWorkerFactory_{{ server.vhost().name() }}_{{ bus.name()}} extends ProxyList implements WorkerFactory
{
    private ContainerProxy $proxy;

    public function __construct(ContainerProxy $proxy)
    {
        $this->proxy = $proxy;
    }

    public function construct(): Worker
    {
        $overrides = [];

        foreach (self::KNOWN_INTERFACE as $interface => $proxy) {
            $overrides[$interface] = fn (): object => $this->proxy->proxy()->get($interface);
        }
        foreach (self::NO_PROMISE_KNOWN_INTERFACE_MAP as $noPromiseInterface => $interface) {
            $overrides[$noPromiseInterface] = fn (): object => $this->proxy->proxy()->get($interface);
        }
        $overrides[LoggerInterface::class] = fn (): LoggerInterface => Factory::create('{{ server.vhost().name() }}-websocket', new Stdout(), []);

        return new WebSocketWorker_{{ server.vhost().name() }}_{{ bus.name()}}($this->proxy->create(ContainerFactory::create($overrides)));
    }
}
// phpcs:enable
