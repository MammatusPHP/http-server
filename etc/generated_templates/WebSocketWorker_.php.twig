<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use Chimera\ServiceBus\Tactician\ServiceBus;
use League\Tactician\CommandBus;
use Mammatus\ContainerFactory;
use Mammatus\Http\Server\WebSockets\Outcome;
use Mammatus\Http\Server\WebSockets\ResponseTransformerMiddleware;
use Psr\Container\ContainerInterface;
use ReactParallel\Pool\Worker\Work\Work;
use ReactParallel\Pool\Worker\Work\Worker;
use WyriHaximus\Metrics\Label;
use WyriHaximus\Metrics\Registry;
use WyriHaximus\Metrics\Tactician\CollectorMiddleware;
use WyriHaximus\Metrics\Tactician\Metrics as CollectorMiddlewareMetrics;

/**
 * This class is generated by mammatus/http-server
 */
final class WebSocketWorker_{{ server.vhost().name() }}_{{ bus.name()}} implements Worker
{
    private ServiceBus $serviceBus;

    public function __construct(ContainerInterface $container)
    {
        $this->serviceBus = new ServiceBus(new CommandBus([new CollectorMiddleware(CollectorMiddlewareMetrics::create($container->get(Registry::class), new Label('vhost', '{{ server.vhost().name() }}'), new Label('bus', '{{ bus.name() }}'))),new ResponseTransformerMiddleware(), CommandHandlerMiddlewareFactory_{{ server.vhost().name() }}_{{ bus.name() }}::create($container)]));
    }

    public function perform(Work $work): Outcome
    {
        return new Outcome($this->serviceBus->handle($work->work()));
    }
}
// phpcs:enable
