<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use League\Tactician\CommandBus;
use League\Tactician\Container\ContainerLocator;
use League\Tactician\Handler\CommandHandlerMiddleware;
use League\Tactician\Handler\CommandNameExtractor\ClassNameExtractor;
use League\Tactician\Handler\MethodNameInflector\HandleInflector;
use Mammatus\Http\Server\Web\ResponseTransformerMiddleware;
use Psr\Container\ContainerInterface;
use Chimera\ServiceBus as ServiceBusInterface;
use WyriHaximus\Metrics\Label;
use WyriHaximus\Metrics\Registry;
use WyriHaximus\Metrics\Tactician\CollectorMiddleware;
use WyriHaximus\Metrics\Tactician\Metrics as CollectorMiddlewareMetrics;

/**
 * This class is generated by mammatus/http-server
 */
final class WebCommandHandlerMiddlewareFactory_{{ server.vhost().nameSanitized() }}_{{ bus.nameSanitized() }} implements ServiceBusInterface
{
    private CommandBus $bus;

    public function __construct(ContainerInterface $container)
    {
        $this->bus = new CommandBus(
            [
                new CollectorMiddleware(
                    CollectorMiddlewareMetrics::create(
                        $container->get(Registry::class),
                        new Label('vhost', '{{ server.vhost().name() }}'),
                        new Label('bus', '{{ bus.name() }}')
                    )
                ),
                new ResponseTransformerMiddleware(),
                new CommandHandlerMiddleware(
                    new ClassNameExtractor(),
                    new ContainerLocator(
                        $container,
                        [
                            {% for handler in bus.handlers() %}
                                \{{ handler.command() }}::class => \{{ handler.handler() }}::class,
                            {% endfor %}
                        ]
                    ),
                    new HandleInflector()
                ),
            ]
        );
    }

    /**
     * {@inheritdoc}
     */
    public function handle(object $message)
    {
        return $this->bus->handle($message);
    }
}
// phpcs:enable
