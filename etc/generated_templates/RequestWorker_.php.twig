<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use Ancarda\Psr7\StringStream\StringStream;
use Chimera\ExecuteQuery;
use Chimera\MessageCreator\NamedConstructor;
use Chimera\Routing\Expressive\RouteParamsExtractor;
use Chimera\Routing\RouteParamsExtraction;
use Chimera\ServiceBus\Tactician\ServiceBus;
use Laminas\Diactoros\ResponseFactory;
use Lcobucci\ContentNegotiation\ContentTypeMiddleware;
use Lcobucci\ContentNegotiation\Formatter\Json;
use Lcobucci\ContentNegotiation\Formatter\StringCast;
use League\Tactician\CommandBus;
use League\Tactician\Container\ContainerLocator;
use League\Tactician\Handler\CommandHandlerMiddleware;
use League\Tactician\Handler\CommandNameExtractor\ClassNameExtractor;
use League\Tactician\Handler\MethodNameInflector\HandleInflector;
use Mammatus\ContainerFactory;
use Mammatus\Http\Server\Middleware\Request;
use Mammatus\Http\Server\Middleware\RequestHandler;
use Mammatus\Http\Server\Web\UnformattedContent;
use Mammatus\Http\Server\Web\ResponseTransformerMiddleware;
use Mammatus\Http\Server\Web\StreamFactory;
use Mezzio\Helper\ServerUrlHelper;
use Mezzio\Helper\ServerUrlMiddleware;
use Mezzio\Helper\UrlHelper;
use Mezzio\Helper\UrlHelperMiddleware;
use Mezzio\Router\Middleware\DispatchMiddleware;
use Mezzio\Router\Middleware\ImplicitHeadMiddleware;
use Mezzio\Router\Middleware\ImplicitOptionsMiddleware;
use Mezzio\Router\Middleware\MethodNotAllowedMiddleware;
use Mezzio\Router\Middleware\RouteMiddleware;
use Mezzio\Router\RouteCollector;
use Middlewares\AccessLog;
use Middlewares\ClientIp;
use Middlewares\ContentType;
use Middlewares\Expires;
use Middlewares\ResponseTime;
use Middlewares\Uuid;
use Northwoods\Broker\Broker;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ResponseFactoryInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\StreamInterface;
use Psr\Log\LoggerInterface;
use ReactParallel\Logger\Logger;
use ReactParallel\Pool\Worker\Work\Work;
use ReactParallel\Pool\Worker\Work\Worker;
use WyriHaximus\Metrics\Label;
use WyriHaximus\Metrics\Registry;
use WyriHaximus\Metrics\Tactician\CollectorMiddleware;
use WyriHaximus\Metrics\Tactician\Metrics as CollectorMiddlewareMetrics;
use Zend\Expressive\Router\FastRouteRouter;
use Zend\Stratigility\Middleware\RequestHandlerMiddleware;

/**
 * This class is generated by mammatus/http-server
 */
final class RequestWorker_{{ server.vhost().nameSanitized() }} implements Worker
{
    private Broker $broker;
    private RequestHandler $handler;

    public function __construct(ContainerInterface $container)
    {
        $namedConstructor = $container->get(NamedConstructor::class);
        $responseFactory = new ResponseFactory();
        $responseFactoryCallable = static function () use ($responseFactory): ResponseFactoryInterface {
            return $responseFactory;
        };
        $streamFactory = new StreamFactory();
        $streamFactoryCallable = static function () use ($streamFactory): StreamInterface {
            return $streamFactory->createStream();
        };
        $router = new FastRouteRouter();
        $routeCollector = new RouteCollector($router);

        {% for bus in server.busses() %}
        $serviceBus_{{ bus.nameSanitized() }} = new ServiceBus(new CommandBus([new CollectorMiddleware(CollectorMiddlewareMetrics::create($container->get(Registry::class), new Label('vhost', '{{ server.vhost().name() }}'), new Label('bus', '{{ bus.name() }}'))), new ResponseTransformerMiddleware(), CommandHandlerMiddlewareFactory_{{ server.vhost().nameSanitized() }}_{{ bus.nameSanitized() }}::create($container)]));
        {% endfor %}
        {% for handler in server.handlers() %}
        $routeCollector->route('{{ handler.path() }}', new RequestHandlerMiddleware(new \{{ handler.handler() }}(new ExecuteQuery($serviceBus_{{ handler.busSanitized() }}, $namedConstructor, \{{ handler.command() }}::class), $responseFactory)), ['{{ handler.methods()|join("', '") }}']);
        {% endfor %}

        $this->broker = new Broker();
        $this->broker->append(new ClientIp());
        $this->broker->append(new Uuid());
        $this->broker->append((new AccessLog($container->get(LoggerInterface::class)))->format('[{{ server.vhost().name() }}] %a %l %u %Dms "%r" %>s %b "%{Referer}i" "%{User-Agent}i"')->
            ipAttribute('client-ip')->
            context(function (ServerRequestInterface $request, ResponseInterface $response) {
                return [
                    'client-ip' => $request->getAttribute('client-ip'),
                    'request-id' => $request->getHeaderLine('X-Uuid'),
                    'request-method' => $request->getMethod(),
                    'request-protocol-version' => $request->getProtocolVersion(),
                    'response-protocol-version' => $response->getProtocolVersion(),
                    'response-status-code' => $response->getStatusCode(),
                    'response-time' => $response->getHeaderLine('X-Response-Time'),
                    'response-time-float' => \substr($response->getHeaderLine('X-Response-Time'), 0, -2),
                    'response-time-float-single-digit' => \round((float)\substr($response->getHeaderLine('X-Response-Time'), 0, -2), 1),
                    'response-time-int' => (int)\round((float)\substr($response->getHeaderLine('X-Response-Time'), 0, -2), 0),
                ];
            }));
        $this->broker->append(new ResponseTime());
        $this->broker->append(new Expires(
            require \Composed\package('middlewares/cache')->getPath('src/expires_defaults.php')
        ));
        $this->broker->append(new ServerUrlMiddleware($container->get(ServerUrlHelper::class)));
        $this->broker->append(new ContentTypeMiddleware(
            new ContentType([
                'json' => [
                    'extension' => ['json'],
                    'mime-type' => ['application/json'],
                    'charset' => true,
                ],
                'html' => [
                    'extension' => ['html', 'htm'],
                    'mime-type' => ['text/html', 'application/xhtml+xml'],
                    'charset' => true,
                ],
                'plain' => [
                    'extension' => [],
                    'mime-type' => ['text/plain'],
                    'charset' => true,
                ],
            ]),
            [
                'application/json' => new Json(),
                'text/html'        => new StringCast(),
                'text/plain'       => new StringCast(),
            ],
            $streamFactory,
        ));
        foreach ($container->get('{{ server.vhost().class() }}')->middleware() as $middleware) {
            $this->broker->append($middleware);
        }
        $this->broker->append(new RouteMiddleware($router));
        $this->broker->append(new RouteMiddleware($router));
        $this->broker->append(new RouteParamsExtraction($container->get(RouteParamsExtractor::class)));
        $this->broker->append(new ImplicitHeadMiddleware($router, $streamFactoryCallable));
        $this->broker->append(new ImplicitOptionsMiddleware($responseFactoryCallable));
        $this->broker->append(new MethodNotAllowedMiddleware($responseFactoryCallable));
        $this->broker->append(new UrlHelperMiddleware(new UrlHelper($router)));
        $this->broker->append(new UnformattedContent());
        $this->broker->append(new DispatchMiddleware());
        $this->handler = new RequestHandler(static fn (ServerRequestInterface $request) => new \React\Http\Message\Response(404));
    }

    public function perform(Work $workWrapper): \Mammatus\Http\Server\Middleware\Response
    {
        $work = $workWrapper->work();
        assert($work instanceof Request);
        $request = $work->request();
        $request = $request->withBody(new StringStream((string)$request->getBody()));
        $response = $this->broker->process($request, $this->handler);
        return new \Mammatus\Http\Server\Middleware\Response($response->withBody(new StringStream((string)$response->getBody())));
    }
}
// phpcs:enable
