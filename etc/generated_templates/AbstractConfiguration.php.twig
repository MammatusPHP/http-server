<?php declare(strict_types=1);

// phpcs:disable
namespace Mammatus\Http\Server\Generated;

use Chimera\MessageCreator\NamedConstructor;
use Laminas\Diactoros\ResponseFactory;
use Psr\Http\Message\ResponseFactoryInterface;
use Mammatus\Http\Server\Web\StreamFactory;
use Mammatus\Http\Server\Web\Psr15Decorator;
use Psr\Http\Message\StreamInterface;
use FriendsOfReact\Http\Middleware\Psr15Adapter\GroupedPSR15Middleware;
use FriendsOfReact\Http\Middleware\Psr15Adapter\PSR15Middleware;
use Mammatus\Http\Server\Middleware\UnformattedContent;
use Mammatus\Http\Server\Web\Server;
use Mezzio\Helper\ServerUrlHelper;
use Psr\Http\Message\ResponseInterface;
use Chimera\ExecuteQuery;
use Mezzio\Helper\ServerUrlMiddleware;
use Lcobucci\ContentNegotiation\ContentTypeMiddleware;
use Laminas\Stratigility\Middleware\RequestHandlerMiddleware;
use Lcobucci\ContentNegotiation\Formatter\Json;
use Lcobucci\ContentNegotiation\Formatter\StringCast;
use Mezzio\Helper\UrlHelper;
use Mezzio\Helper\UrlHelperMiddleware;
use Mezzio\Router\Middleware\DispatchMiddleware;
use Mezzio\Router\Middleware\ImplicitHeadMiddleware;
use Mezzio\Router\Middleware\ImplicitOptionsMiddleware;
use Mezzio\Router\Middleware\MethodNotAllowedMiddleware;
use Mezzio\Router\Middleware\RouteMiddleware;
use Mezzio\Router\RouteCollector;
use Middlewares\AccessLog;
use Middlewares\ClientIp;
use Middlewares\ContentType;
use Middlewares\Expires;
use Middlewares\ResponseTime;
use Middlewares\Uuid;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Log\LoggerInterface;
use React\Cache\ArrayCache;
use React\EventLoop\Loop;
use React\Http\Middleware\LimitConcurrentRequestsMiddleware;
use React\Http\Middleware\RequestBodyBufferMiddleware;
use React\Http\Middleware\StreamingRequestMiddleware;
use Mezzio\Router\FastRouteRouter;
use React\Http\HttpServer;
use Chimera\Routing\Mezzio\RouteParamsExtractor;
use Chimera\Routing\RouteParamsExtraction;
use React\Promise\PromiseInterface;
use ReactInspector\HttpMiddleware\Metrics as MiddlewareCollectorMetrics;
use ReactInspector\HttpMiddleware\MiddlewareCollector;
use Thruway\Middleware;
use WyriHaximus\HtmlCompress\Factory as HtmlCompressFactory;
use WyriHaximus\Metrics\Label;
use WyriHaximus\Metrics\Label\Name;
use WyriHaximus\Metrics\Registry;
use WyriHaximus\PSR3\CallableThrowableLogger\CallableThrowableLogger;
use WyriHaximus\PSR3\ContextLogger\ContextLogger;
use WyriHaximus\React\Http\Middleware\CssCompressMiddleware;
use WyriHaximus\React\Http\Middleware\HtmlCompressMiddleware;
use WyriHaximus\React\Http\Middleware\JsCompressMiddleware;
use WyriHaximus\React\Http\Middleware\WebrootPreloadMiddleware;

use function React\Promise\resolve;
use function Safe\substr;

/**
 * This class is generated by mammatus/http-server
 * @infection-ignore-all
 */
abstract class AbstractConfiguration
{
    {% for server in servers %}
    private Server $server_{{ server.vhost.nameSanitized }};
    {% endfor %}

    /**
     * @return iterable<callable|MiddlewareInterface>
     */
    abstract protected function middleware(): iterable;

    final public function __construct(
        LoggerInterface $logger,
        Registry $metricsRegistry,
        NamedConstructor $namedConstructor,
        ServerUrlHelper $serverUrlHelper,
        RouteParamsExtractor $routeParamsExtractor,
        {% for server in servers %}
        {% for bus in server.busses %}
        CommandHandlerMiddlewareFactory_{{ server.vhost.nameSanitized }}_{{ bus.nameSanitized }} $bus_{{ server.vhost.nameSanitized }}_{{ bus.nameSanitized }},
        {% endfor %}
        {% if server.realms|length > 0 and (server.hasRpcs() or server.hasSubscriptions()) %}
        RouterFactory_{{ server.vhost.nameSanitized }} $routerFactory_{{ server.vhost.nameSanitized }},
        {% endif %}
        \{{ server.vhost.class }} $vhost_{{ server.vhost.classSanitized }},
        {% endfor %}
    ) {
        $htmlCompress = HtmlCompressFactory::constructSmallest();
        \Thruway\Logging\Logger::set($logger);
        $metricsRegistry->counter('vhost', 'Currently active vhosts', new Name('type'))->counter(new Label('type', 'HTTP'))->incrBy({{ servers|length }});

        $responseFactory = new ResponseFactory();
        $responseFactoryCallable = static function () use ($responseFactory): ResponseFactoryInterface {
            return $responseFactory;
        };
        $streamFactory = new StreamFactory();
        $streamFactoryCallable = static function () use ($streamFactory): StreamInterface {
            return $streamFactory->createStream();
        };

        {% for server in servers %}
        $metricsRegistry->counter('vhost', 'Currently active vhosts', new Name('type'))->counter(new Label('type', 'WebSocket'))->incrBy({{ server.realms|length }});
        $metricsRegistry->counter('vhost_realm', 'Currently active realms per vhosts', new Name('type'), new Name('vhost'))->counter(new Label('type', 'WebSocket'), new Label('vhost', '{{ server.vhost.name }}'))->incrBy({{ server.realms|length }});

        $router_{{ server.vhost.nameSanitized }} = new FastRouteRouter();
        $routeCollector_{{ server.vhost.nameSanitized }} = new RouteCollector($router_{{ server.vhost.nameSanitized }});
        {% for handler in server.handlers %}
        $routeCollector_{{ server.vhost.nameSanitized }}->route('{{ handler.path }}', new RequestHandlerMiddleware(new \{{ handler.handler }}(new ExecuteQuery($bus_{{ server.vhost.nameSanitized }}_{{ handler.busSanitized }}, $namedConstructor, \{{ handler.command }}::class), $responseFactory)), ['{{ handler.methods|join("', '") }}']);
        {% endfor %}
        /**
         * @psalm-suppress InvalidArgument
         */
        $http_server_{{ server.vhost.nameSanitized }} = new HttpServer(...Psr15Decorator::decorate(...[
            ...$this->middleware(),
            new LimitConcurrentRequestsMiddleware({% if server.vhost.maxConcurrentRequests is null %}PHP_INT_MAX{% else %}{{ server.vhost.maxConcurrentRequests }}{% endif %}),
            new StreamingRequestMiddleware(),
            new MiddlewareCollector(MiddlewareCollectorMetrics::create($metricsRegistry, new Label('vhost', '{{ server.vhost.name }}'))),
            {% if server.realms|length > 0 and (server.hasRpcs() or server.hasSubscriptions()) %}
                new Middleware(['/', '/ws/'], Loop::get(), $routerFactory_{{ server.vhost.nameSanitized }}->router()),
            {% endif %}
            new RequestBodyBufferMiddleware(),
            static fn (ServerRequestInterface $request, callable $next): PromiseInterface => resolve($next($request->withAttribute('vhost', '{{ server.vhost.name }}'))),
            {% if server.hasWebroot %}
            new WebrootPreloadMiddleware(
                '{{ server.webroot }}',
                new ContextLogger($logger, ['section' => 'webroot'], 'webroot'),
                new ArrayCache(), // TODO: Add support for other cache storages
            ),
            {% endif %}
            new HtmlCompressMiddleware($htmlCompress),
            new CssCompressMiddleware($htmlCompress),
            new JsCompressMiddleware($htmlCompress),
            (new GroupedPSR15Middleware())->
                withMiddleware(new ClientIp())->
{#                withMiddleware(new Uuid())->#}
                withMiddleware((new AccessLog($logger))->format('[{{ server.vhost.name }}] %a %l %u %Dms "%r" %>s %b "%{Referer}i" "%{User-Agent}i"')->
                    ipAttribute('client-ip')->
                    context(static fn (ServerRequestInterface $request, ResponseInterface $response): array => [
                        'client-ip' => $request->getAttribute('client-ip'),
{#                        'request-id' => $request->getHeaderLine('X-Uuid'),#}
                        'request-method' => $request->getMethod(),
                        'request-protocol-version' => $request->getProtocolVersion(),
                        'response-protocol-version' => $response->getProtocolVersion(),
                        'response-status-code' => $response->getStatusCode(),
                        'response-time' => $response->getHeaderLine('X-Response-Time'),
                        'response-time-float' => substr($response->getHeaderLine('X-Response-Time'), 0, -2),
                        'response-time-float-single-digit' => \round((float)substr($response->getHeaderLine('X-Response-Time'), 0, -2), 1),
                        'response-time-int' => (int)\round((float)substr($response->getHeaderLine('X-Response-Time'), 0, -2), 0),
                    ]))->
                withMiddleware(new ResponseTime())->
{#                withMiddleware(new Expires(#}
{#                    require \Composed\package('middlewares/cache')->getPath('src/expires_defaults.php')#}
{#                ))->#}
                withMiddleware(new ServerUrlMiddleware($serverUrlHelper))->
                withMiddleware(new ContentTypeMiddleware(
                    new ContentType(
                        [
                            'json' => [
                                'extension' => ['json'],
                                'mime-type' => ['application/json'],
                                'charset' => true,
                            ],
                            'html' => [
                                'extension' => ['html', 'htm'],
                                'mime-type' => ['text/html', 'application/xhtml+xml'],
                                'charset' => true,
                            ],
                            'plain' => [
                                'extension' => [],
                                'mime-type' => ['text/plain'],
                                'charset' => true,
                            ],
                        ]
                    ),
                    [
                        'application/json' => new Json(),
                        'text/html'        => new StringCast(),
                        'text/plain'       => new StringCast(),
                    ],
                    $streamFactory,
                )),
            ...$vhost_{{ server.vhost.classSanitized }}->middleware(),
            (new GroupedPSR15Middleware())->
                withMiddleware(new RouteMiddleware($router_{{ server.vhost.nameSanitized }}))->
                withMiddleware(new RouteParamsExtraction($routeParamsExtractor))->
                withMiddleware(new ImplicitHeadMiddleware($router_{{ server.vhost.nameSanitized }}, $streamFactoryCallable))->
                withMiddleware(new ImplicitOptionsMiddleware($responseFactoryCallable))->
                withMiddleware(new MethodNotAllowedMiddleware($responseFactoryCallable))->
                withMiddleware(new UrlHelperMiddleware(new UrlHelper($router_{{ server.vhost.nameSanitized }}))),
            new UnformattedContent(),
            new PSR15Middleware(new DispatchMiddleware()),
            static fn (ServerRequestInterface $request) => new \React\Http\Message\Response(404)
        ]));
        $http_server_{{ server.vhost.nameSanitized }}->on('error', CallableThrowableLogger::create($logger));
        $this->server_{{ server.vhost.nameSanitized }} = new Server(
            '{{ server.vhost.name }}',
            '0.0.0.0:{{ server.vhost.port }}',
            $http_server_{{ server.vhost.nameSanitized }},
        );
        {% endfor %}
    }

    /**
     * @return iterable<Server>
     */
    final public function servers(): iterable
    {
        {% for server in servers %}
        yield '{{ server.vhost.name }}' => $this->server_{{ server.vhost.nameSanitized }};
        {% endfor %}
    }
}
// phpcs:enable
